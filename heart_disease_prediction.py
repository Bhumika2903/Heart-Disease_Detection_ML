# -*- coding: utf-8 -*-
"""Heart_Disease_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yog3boEoeLapXfJKCXnW2e-RN84_91p6

Importing the Dependencies

Data Collection and Processing
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('/content/heart_disease_data.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart

Splitting the Features and Target
"""

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression(max_iter=1000)

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

import warnings
warnings.filterwarnings("ignore", category=UserWarning)

"""Building a Predictive System"""

age = int(input("Enter the person's age: "))
sex = int(input("Enter the person's sex (0 for female, 1 for male): "))
cp = int(input("Enter the chest pain type (0-3): "))
trestbps = int(input("Enter the resting blood pressure (mm Hg): "))
chol = int(input("Enter the serum cholesterol (mg/dl): "))
fbs = int(input("Enter the fasting blood sugar (> 120 mg/dl, 0 for False, 1 for True): "))
restecg = int(input("Enter the resting electrocardiographic results (0-2): "))
thalach = int(input("Enter the maximum heart rate achieved: "))
exang = int(input("Enter exercise induced angina (0 for No, 1 for Yes): "))
oldpeak = float(input("Enter ST depression induced by exercise relative to rest: "))
slope = int(input("Enter the slope of the peak exercise ST segment (0-2): "))
ca = int(input("Enter the number of major vessels (0-3) colored by fluoroscopy: "))
thal = int(input("Enter the thalassemia type (1-3): "))

# Create input data as a tuple
input_data = (age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal)

# Convert input data to a NumPy array and reshape it
input_data_as_numpy_array = np.asarray(input_data).reshape(1, -1)

# Make predictions
prediction = model.predict(input_data_as_numpy_array)

# Interpret predictions
if prediction[0] == 0:
    print("The person does not have heart disease.")
else:
    print("The person has heart disease.")

from google.colab import drive
drive.mount('/content/drive')